import type { CountrySummary, GlobalSummary } from '@/types/covid';

export function exportToCSV(data: CountrySummary[], filename: string = 'covid-data.csv') {
  const headers = [
    'Country',
    'Total Cases',
    'Deaths',
    'Recovered',
    'Active Cases',
    'Death Rate (%)',
    'Recovery Rate (%)',
    'Last Updated'
  ];

  const csvContent = [
    headers.join(','),
    ...data.map(country => [
      `"${country.country}"`,
      country.confirmed,
      country.deaths,
      country.recovered,
      country.active,
      ((country.deaths / country.confirmed) * 100).toFixed(2),
      ((country.recovered / country.confirmed) * 100).toFixed(2),
      `"${new Date(country.lastUpdated).toLocaleDateString()}"`
    ].join(','))
  ].join('\n');

  downloadFile(csvContent, filename, 'text/csv');
}

export function exportToJSON(data: unknown, filename: string = 'covid-data.json') {
  const jsonContent = JSON.stringify(data, null, 2);
  downloadFile(jsonContent, filename, 'application/json');
}

export function exportGlobalSummaryToCSV(globalData: GlobalSummary, filename: string = 'global-summary.csv') {
  const headers = [
    'Metric',
    'Value',
    'Last Updated'
  ];

  const rows = [
    ['Total Confirmed Cases', globalData.totalConfirmed, globalData.lastUpdated],
    ['Total Deaths', globalData.totalDeaths, globalData.lastUpdated],
    ['Total Recovered', globalData.totalRecovered, globalData.lastUpdated],
    ['New Cases', globalData.newConfirmed, globalData.lastUpdated],
    ['New Deaths', globalData.newDeaths, globalData.lastUpdated],
    ['New Recovered', globalData.newRecovered, globalData.lastUpdated],
  ];

  const csvContent = [
    headers.join(','),
    ...rows.map(row => [
      `"${row[0]}"`,
      row[1],
      `"${new Date(row[2] as string).toLocaleDateString()}"`
    ].join(','))
  ].join('\n');

  downloadFile(csvContent, filename, 'text/csv');
}

export function generatePrintableReport(globalData: GlobalSummary, countries: CountrySummary[]): string {
  const reportDate = new Date().toLocaleDateString();
  const top10Countries = countries.slice(0, 10);

  return `
<!DOCTYPE html>
<html>
<head>
    <title>COVID-19 Report - ${reportDate}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        h1 { color: #333; border-bottom: 2px solid #333; }
        h2 { color: #666; margin-top: 30px; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f5f5f5; font-weight: bold; }
        .stat { display: inline-block; margin: 10px 20px; }
        .number { font-size: 1.5em; font-weight: bold; color: #333; }
        .label { display: block; color: #666; font-size: 0.9em; }
        @media print { .no-print { display: none; } }
    </style>
</head>
<body>
    <h1>COVID-19 Global Report</h1>
    <p>Generated on: ${reportDate}</p>
    
    <h2>Global Statistics</h2>
    <div class="stat">
        <span class="number">${globalData.totalConfirmed.toLocaleString()}</span>
        <span class="label">Total Cases</span>
    </div>
    <div class="stat">
        <span class="number">${globalData.totalDeaths.toLocaleString()}</span>
        <span class="label">Total Deaths</span>
    </div>
    <div class="stat">
        <span class="number">${globalData.totalRecovered.toLocaleString()}</span>
        <span class="label">Total Recovered</span>
    </div>
    
    <h2>Top 10 Most Affected Countries</h2>
    <table>
        <thead>
            <tr>
                <th>Country</th>
                <th>Total Cases</th>
                <th>Deaths</th>
                <th>Recovered</th>
                <th>Active</th>
                <th>Death Rate</th>
                <th>Recovery Rate</th>
            </tr>
        </thead>
        <tbody>
            ${top10Countries.map(country => `
                <tr>
                    <td>${country.country}</td>
                    <td>${country.confirmed.toLocaleString()}</td>
                    <td>${country.deaths.toLocaleString()}</td>
                    <td>${country.recovered.toLocaleString()}</td>
                    <td>${country.active.toLocaleString()}</td>
                    <td>${((country.deaths / country.confirmed) * 100).toFixed(2)}%</td>
                    <td>${((country.recovered / country.confirmed) * 100).toFixed(2)}%</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
    
    <p style="margin-top: 40px; color: #666; font-size: 0.9em;">
        Report generated by COVID-19 Tracker | Data sources: WHO, CDC, API Ninjas
    </p>
</body>
</html>
  `;
}

export function printReport(htmlContent: string) {
  const printWindow = window.open('', '_blank');
  if (printWindow) {
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    printWindow.close();
  }
}

function downloadFile(content: string, filename: string, contentType: string) {
  const blob = new Blob([content], { type: contentType });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
} 